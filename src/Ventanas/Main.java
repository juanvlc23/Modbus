/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Ventanas;

import ModBusThreads.Cliente;
import ModBusThreads.Servidor;
import java.awt.Color;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;

/**
 *
 * @author Usuario
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Cliente Cliente1;
    public Servidor Servidor1;

    public Main() {
        initComponents();
        Cliente1 = new Cliente();
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        IP = new javax.swing.JTextField();
        Port = new javax.swing.JTextField();
        ID = new javax.swing.JTextField();
        ClteStartAddress = new javax.swing.JTextField();
        ClientConect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        LblStatus = new javax.swing.JLabel();
        ClientDisconnect = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        ClteRegType = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ClteReg1 = new javax.swing.JTextField();
        ClteReg2 = new javax.swing.JTextField();
        ClteReg3 = new javax.swing.JTextField();
        ClteReg4 = new javax.swing.JTextField();
        ClteReg5 = new javax.swing.JTextField();
        ClteReg6 = new javax.swing.JTextField();
        ClteReg7 = new javax.swing.JTextField();
        ClteReg8 = new javax.swing.JTextField();
        ClteReg9 = new javax.swing.JTextField();
        ClteReg10 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        Port1 = new javax.swing.JTextField();
        ClteStartAddress1 = new javax.swing.JTextField();
        ClientConect1 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        LblStatus1 = new javax.swing.JLabel();
        ClientDisconnect1 = new javax.swing.JButton();
        jCheckBox3 = new javax.swing.JCheckBox();
        ClteRegType1 = new javax.swing.JComboBox<>();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        ClteReg11 = new javax.swing.JTextField();
        ClteReg12 = new javax.swing.JTextField();
        ClteReg13 = new javax.swing.JTextField();
        ClteReg14 = new javax.swing.JTextField();
        ClteReg15 = new javax.swing.JTextField();
        ClteReg16 = new javax.swing.JTextField();
        ClteReg17 = new javax.swing.JTextField();
        ClteReg18 = new javax.swing.JTextField();
        ClteReg19 = new javax.swing.JTextField();
        ClteReg20 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        ClteReg21 = new javax.swing.JTextField();
        ClteReg22 = new javax.swing.JTextField();
        ClteReg23 = new javax.swing.JTextField();
        ClteReg24 = new javax.swing.JTextField();
        ClteReg25 = new javax.swing.JTextField();
        ClteReg26 = new javax.swing.JTextField();
        ClteReg27 = new javax.swing.JTextField();
        ClteReg28 = new javax.swing.JTextField();
        ClteReg29 = new javax.swing.JTextField();
        ClteReg30 = new javax.swing.JTextField();
        jCheckBox6 = new javax.swing.JCheckBox();
        ClteReg31 = new javax.swing.JTextField();
        ClteReg32 = new javax.swing.JTextField();
        ClteReg33 = new javax.swing.JTextField();
        ClteReg34 = new javax.swing.JTextField();
        ClteReg35 = new javax.swing.JTextField();
        ClteReg36 = new javax.swing.JTextField();
        ClteReg37 = new javax.swing.JTextField();
        ClteReg38 = new javax.swing.JTextField();
        ClteReg39 = new javax.swing.JTextField();
        ClteReg40 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ClientLog = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        ClientLog1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(IP, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, 90, -1));
        getContentPane().add(Port, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, 90, -1));
        getContentPane().add(ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 90, 90, -1));

        ClteStartAddress.setText("0");
        ClteStartAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ClteStartAddressFocusLost(evt);
            }
        });
        getContentPane().add(ClteStartAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 200, 90, -1));

        ClientConect.setText("Connect");
        ClientConect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientConectActionPerformed(evt);
            }
        });
        getContentPane().add(ClientConect, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 100, -1));

        jLabel1.setText("Port");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, -1, -1));

        jLabel2.setText("IP");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, -1, -1));

        jLabel3.setText("ID");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 90, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 255));
        jLabel4.setText("Client (Master)");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, -1));

        jLabel5.setText("Status");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, -1, -1));

        LblStatus.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LblStatus.setForeground(new java.awt.Color(255, 0, 0));
        LblStatus.setText("Disconected");
        getContentPane().add(LblStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 170, -1, -1));

        ClientDisconnect.setText("Disconnect");
        ClientDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientDisconnectActionPerformed(evt);
            }
        });
        getContentPane().add(ClientDisconnect, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 130, 100, -1));

        jCheckBox1.setText("Active Read");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 260, -1, -1));

        ClteRegType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Coils", "Discrete Inputs", "Holding Registers", "Input Registers" }));
        getContentPane().add(ClteRegType, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 200, 90, -1));

        jLabel6.setText("Register Type");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 202, -1, -1));

        jLabel7.setText("Start Address");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 202, -1, -1));

        ClteReg1.setText("0");
        getContentPane().add(ClteReg1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, 100, -1));

        ClteReg2.setText("0");
        getContentPane().add(ClteReg2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 320, 100, -1));

        ClteReg3.setText("0");
        getContentPane().add(ClteReg3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 350, 100, -1));

        ClteReg4.setText("0");
        getContentPane().add(ClteReg4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 380, 100, -1));

        ClteReg5.setText("0");
        ClteReg5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClteReg5ActionPerformed(evt);
            }
        });
        getContentPane().add(ClteReg5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 410, 100, -1));

        ClteReg6.setText("0");
        getContentPane().add(ClteReg6, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 440, 100, -1));

        ClteReg7.setText("0");
        getContentPane().add(ClteReg7, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 470, 100, -1));

        ClteReg8.setText("0");
        getContentPane().add(ClteReg8, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 500, 100, -1));

        ClteReg9.setText("0");
        getContentPane().add(ClteReg9, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 530, 100, -1));

        ClteReg10.setText("0");
        getContentPane().add(ClteReg10, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 560, 100, -1));

        jLabel8.setText("9");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 560, 50, -1));

        jLabel9.setText("8");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 530, 50, -1));

        jLabel10.setText("7");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 500, 50, -1));

        jLabel11.setText("6");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 470, 50, -1));

        jLabel12.setText("5");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 440, 50, -1));

        jLabel13.setText("4");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 410, 50, -1));

        jLabel14.setText("3");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, 50, -1));

        jLabel15.setText("2");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 50, -1));

        jLabel16.setText("1");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, 50, -1));

        jLabel18.setText("0");
        getContentPane().add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 50, -1));

        jCheckBox2.setText("DebugMode");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, -1));
        getContentPane().add(Port1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 60, 90, -1));

        ClteStartAddress1.setText("0");
        ClteStartAddress1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ClteStartAddress1FocusLost(evt);
            }
        });
        getContentPane().add(ClteStartAddress1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 200, 90, -1));

        ClientConect1.setText("Connect");
        ClientConect1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientConect1ActionPerformed(evt);
            }
        });
        getContentPane().add(ClientConect1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 130, 100, -1));

        jLabel17.setText("Port");
        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 60, -1, -1));

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(51, 51, 255));
        jLabel21.setText("Server (Slave)");
        getContentPane().add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, -1, -1));

        jLabel22.setText("Status");
        getContentPane().add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 170, -1, -1));

        LblStatus1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LblStatus1.setForeground(new java.awt.Color(255, 0, 0));
        LblStatus1.setText("Server Disconected");
        getContentPane().add(LblStatus1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 170, -1, -1));

        ClientDisconnect1.setText("Disconnect");
        ClientDisconnect1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientDisconnect1ActionPerformed(evt);
            }
        });
        getContentPane().add(ClientDisconnect1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 130, 100, -1));

        jCheckBox3.setText("Active Read");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 260, -1, -1));

        ClteRegType1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Coils", "Discrete Inputs", "Holding Registers", "Input Registers" }));
        getContentPane().add(ClteRegType1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 200, 90, -1));

        jLabel23.setText("Register Type");
        getContentPane().add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 202, -1, -1));

        jLabel24.setText("Start Address");
        getContentPane().add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 202, -1, -1));

        ClteReg11.setText("0");
        getContentPane().add(ClteReg11, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 290, 100, -1));

        ClteReg12.setText("0");
        getContentPane().add(ClteReg12, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 320, 100, -1));

        ClteReg13.setText("0");
        getContentPane().add(ClteReg13, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 350, 100, -1));

        ClteReg14.setText("0");
        getContentPane().add(ClteReg14, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 380, 100, -1));

        ClteReg15.setText("0");
        ClteReg15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClteReg15ActionPerformed(evt);
            }
        });
        getContentPane().add(ClteReg15, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 410, 100, -1));

        ClteReg16.setText("0");
        getContentPane().add(ClteReg16, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 440, 100, -1));

        ClteReg17.setText("0");
        getContentPane().add(ClteReg17, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 470, 100, -1));

        ClteReg18.setText("0");
        getContentPane().add(ClteReg18, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 500, 100, -1));

        ClteReg19.setText("0");
        getContentPane().add(ClteReg19, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 530, 100, -1));

        ClteReg20.setText("0");
        getContentPane().add(ClteReg20, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 560, 100, -1));

        jLabel25.setText("9");
        getContentPane().add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 560, 50, -1));

        jLabel26.setText("8");
        getContentPane().add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 530, 50, -1));

        jLabel27.setText("7");
        getContentPane().add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 500, 50, -1));

        jLabel28.setText("6");
        getContentPane().add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 470, 50, -1));

        jLabel29.setText("5");
        getContentPane().add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 440, 50, -1));

        jLabel30.setText("4");
        getContentPane().add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 410, 50, -1));

        jLabel31.setText("3");
        getContentPane().add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 380, 50, -1));

        jLabel32.setText("2");
        getContentPane().add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 350, 50, -1));

        jLabel33.setText("1");
        getContentPane().add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 320, 50, -1));

        jLabel34.setText("0");
        getContentPane().add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 290, 50, -1));

        jCheckBox4.setText("DebugMode");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox4, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 260, -1, -1));

        jCheckBox5.setText("Active Write");
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox5, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 260, -1, -1));

        ClteReg21.setText("0");
        getContentPane().add(ClteReg21, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 290, 100, -1));

        ClteReg22.setText("0");
        getContentPane().add(ClteReg22, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 320, 100, -1));

        ClteReg23.setText("0");
        getContentPane().add(ClteReg23, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 350, 100, -1));

        ClteReg24.setText("0");
        getContentPane().add(ClteReg24, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 380, 100, -1));

        ClteReg25.setText("0");
        ClteReg25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClteReg25ActionPerformed(evt);
            }
        });
        getContentPane().add(ClteReg25, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 410, 100, -1));

        ClteReg26.setText("0");
        getContentPane().add(ClteReg26, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 440, 100, -1));

        ClteReg27.setText("0");
        getContentPane().add(ClteReg27, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 470, 100, -1));

        ClteReg28.setText("0");
        getContentPane().add(ClteReg28, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 500, 100, -1));

        ClteReg29.setText("0");
        getContentPane().add(ClteReg29, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 530, 100, -1));

        ClteReg30.setText("0");
        getContentPane().add(ClteReg30, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 560, 100, -1));

        jCheckBox6.setText("Active Write");
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox6, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 260, -1, -1));

        ClteReg31.setText("0");
        getContentPane().add(ClteReg31, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 290, 100, -1));

        ClteReg32.setText("0");
        getContentPane().add(ClteReg32, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 320, 100, -1));

        ClteReg33.setText("0");
        getContentPane().add(ClteReg33, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 350, 100, -1));

        ClteReg34.setText("0");
        getContentPane().add(ClteReg34, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 380, 100, -1));

        ClteReg35.setText("0");
        ClteReg35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClteReg35ActionPerformed(evt);
            }
        });
        getContentPane().add(ClteReg35, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 410, 100, -1));

        ClteReg36.setText("0");
        getContentPane().add(ClteReg36, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 440, 100, -1));

        ClteReg37.setText("0");
        getContentPane().add(ClteReg37, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 470, 100, -1));

        ClteReg38.setText("0");
        getContentPane().add(ClteReg38, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 500, 100, -1));

        ClteReg39.setText("0");
        getContentPane().add(ClteReg39, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 530, 100, -1));

        ClteReg40.setText("0");
        getContentPane().add(ClteReg40, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 560, 100, -1));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(373, 10, 10, 580));

        jLabel35.setText("Number of Clients Connected");
        getContentPane().add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 30, -1, -1));

        jLabel36.setText("0");
        getContentPane().add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 30, 50, -1));

        ClientLog.setEditable(false);
        ClientLog.setColumns(20);
        ClientLog.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ClientLog.setRows(5);
        ClientLog.setOpaque(false);
        jScrollPane2.setViewportView(ClientLog);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 590, 360, 100));

        ClientLog1.setEditable(false);
        ClientLog1.setColumns(20);
        ClientLog1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ClientLog1.setRows(5);
        ClientLog1.setEnabled(false);
        ClientLog1.setOpaque(false);
        jScrollPane3.setViewportView(ClientLog1);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 590, 360, 100));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ClientConectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientConectActionPerformed
        // TODO add your handling code here:

        Cliente1.setParams(IP.getText(), Port.getText(), ID.getText(), ClteStartAddress.getText(), "10", jCheckBox2.isSelected());
ClientLog.setText("\n");
        Timer TmrCliente = new Timer();
        TimerTask TmrTskStatus = new TimerTask() {

            @Override
            public void run() {
                LblStatus.setText(Cliente1.strStatus);
                if (Cliente1.strStatus == "Disconected") {

                    LblStatus.setForeground(Color.red);
                } else {
                    LblStatus.setForeground(Color.green);
                }

                if (Cliente1.FlgConnect && Cliente1.FlgRead) {

                    switch (ClteRegType.getSelectedIndex()) {
                        case 0://coils
                            Cliente1.RegisterType = 0;
                            ClteReg1.setText(String.valueOf(Cliente1.RCoils[0]));
                            ClteReg2.setText(String.valueOf(Cliente1.RCoils[1]));
                            ClteReg3.setText(String.valueOf(Cliente1.RCoils[2]));
                            ClteReg4.setText(String.valueOf(Cliente1.RCoils[3]));
                            ClteReg5.setText(String.valueOf(Cliente1.RCoils[4]));
                            ClteReg6.setText(String.valueOf(Cliente1.RCoils[5]));
                            ClteReg7.setText(String.valueOf(Cliente1.RCoils[6]));
                            ClteReg8.setText(String.valueOf(Cliente1.RCoils[7]));
                            ClteReg9.setText(String.valueOf(Cliente1.RCoils[8]));
                            ClteReg10.setText(String.valueOf(Cliente1.RCoils[9]));
                            break;
                        case 1://discrete inputs
                            Cliente1.RegisterType = 1;
                            ClteReg1.setText(String.valueOf(Cliente1.RDiscreteInputs[0]));
                            ClteReg2.setText(String.valueOf(Cliente1.RDiscreteInputs[1]));
                            ClteReg3.setText(String.valueOf(Cliente1.RDiscreteInputs[2]));
                            ClteReg4.setText(String.valueOf(Cliente1.RDiscreteInputs[3]));
                            ClteReg5.setText(String.valueOf(Cliente1.RDiscreteInputs[4]));
                            ClteReg6.setText(String.valueOf(Cliente1.RDiscreteInputs[5]));
                            ClteReg7.setText(String.valueOf(Cliente1.RDiscreteInputs[6]));
                            ClteReg8.setText(String.valueOf(Cliente1.RDiscreteInputs[7]));
                            ClteReg9.setText(String.valueOf(Cliente1.RDiscreteInputs[8]));
                            ClteReg10.setText(String.valueOf(Cliente1.RDiscreteInputs[9]));
                            break;
                        case 2://Holding registers
                            Cliente1.RegisterType = 2;
                            ClteReg1.setText(String.valueOf(Cliente1.RHoldingRegisters[0]));
                            ClteReg2.setText(String.valueOf(Cliente1.RHoldingRegisters[1]));
                            ClteReg3.setText(String.valueOf(Cliente1.RHoldingRegisters[2]));
                            ClteReg4.setText(String.valueOf(Cliente1.RHoldingRegisters[3]));
                            ClteReg5.setText(String.valueOf(Cliente1.RHoldingRegisters[4]));
                            ClteReg6.setText(String.valueOf(Cliente1.RHoldingRegisters[5]));
                            ClteReg7.setText(String.valueOf(Cliente1.RHoldingRegisters[6]));
                            ClteReg8.setText(String.valueOf(Cliente1.RHoldingRegisters[7]));
                            ClteReg9.setText(String.valueOf(Cliente1.RHoldingRegisters[8]));
                            ClteReg10.setText(String.valueOf(Cliente1.RHoldingRegisters[9]));
                            break;
                        case 3:// input registers
                            Cliente1.RegisterType = 3;
                            ClteReg1.setText(String.valueOf(Cliente1.RInputRegisters[0]));
                            ClteReg2.setText(String.valueOf(Cliente1.RInputRegisters[1]));
                            ClteReg3.setText(String.valueOf(Cliente1.RInputRegisters[2]));
                            ClteReg4.setText(String.valueOf(Cliente1.RInputRegisters[3]));
                            ClteReg5.setText(String.valueOf(Cliente1.RInputRegisters[4]));
                            ClteReg6.setText(String.valueOf(Cliente1.RInputRegisters[5]));
                            ClteReg7.setText(String.valueOf(Cliente1.RInputRegisters[6]));
                            ClteReg8.setText(String.valueOf(Cliente1.RInputRegisters[7]));
                            ClteReg9.setText(String.valueOf(Cliente1.RInputRegisters[8]));
                            ClteReg10.setText(String.valueOf(Cliente1.RInputRegisters[9]));
                            break;
                    }//swithc

                }
                //***********************************************************************************
                if (Cliente1.FlgConnect && Cliente1.FlgWrite) {

                    switch (ClteRegType.getSelectedIndex()) {
                        case 0://coils
                            Cliente1.RegisterType = 0;
                            Cliente1.WCoils[0] = Boolean.parseBoolean(ClteReg21.getText());
                            Cliente1.WCoils[1] = Boolean.parseBoolean(ClteReg22.getText());
                            Cliente1.WCoils[2] = Boolean.parseBoolean(ClteReg23.getText());
                            Cliente1.WCoils[3] = Boolean.parseBoolean(ClteReg24.getText());
                            Cliente1.WCoils[4] = Boolean.parseBoolean(ClteReg25.getText());
                            Cliente1.WCoils[5] = Boolean.parseBoolean(ClteReg26.getText());
                            Cliente1.WCoils[6] = Boolean.parseBoolean(ClteReg27.getText());
                            Cliente1.WCoils[7] = Boolean.parseBoolean(ClteReg28.getText());
                            Cliente1.WCoils[8] = Boolean.parseBoolean(ClteReg29.getText());
                            Cliente1.WCoils[9] = Boolean.parseBoolean(ClteReg30.getText());
                            break;
                        case 1://discrete inputs
                            Cliente1.RegisterType = 1;
                            /*ClteReg1.setText(String.valueOf(Cliente1.RDiscreteInputs[0]));
                            ClteReg2.setText(String.valueOf(Cliente1.RDiscreteInputs[1]));
                            ClteReg3.setText(String.valueOf(Cliente1.RDiscreteInputs[2]));
                            ClteReg4.setText(String.valueOf(Cliente1.RDiscreteInputs[3]));
                            ClteReg5.setText(String.valueOf(Cliente1.RDiscreteInputs[4]));
                            ClteReg6.setText(String.valueOf(Cliente1.RDiscreteInputs[5]));
                            ClteReg7.setText(String.valueOf(Cliente1.RDiscreteInputs[6]));
                            ClteReg8.setText(String.valueOf(Cliente1.RDiscreteInputs[7]));
                            ClteReg9.setText(String.valueOf(Cliente1.RDiscreteInputs[8]));
                            ClteReg10.setText(String.valueOf(Cliente1.RDiscreteInputs[9]));
                             */
                            break;
                        case 2://Holding registers
                            Cliente1.RegisterType = 2;
                            Cliente1.WHoldingRegisters[0] = Integer.parseInt(ClteReg21.getText());
                            Cliente1.WHoldingRegisters[1] = Integer.parseInt(ClteReg22.getText());
                            Cliente1.WHoldingRegisters[2] = Integer.parseInt(ClteReg23.getText());
                            Cliente1.WHoldingRegisters[3] = Integer.parseInt(ClteReg24.getText());
                            Cliente1.WHoldingRegisters[4] = Integer.parseInt(ClteReg25.getText());
                            Cliente1.WHoldingRegisters[5] = Integer.parseInt(ClteReg26.getText());
                            Cliente1.WHoldingRegisters[6] = Integer.parseInt(ClteReg27.getText());
                            Cliente1.WHoldingRegisters[7] = Integer.parseInt(ClteReg28.getText());
                            Cliente1.WHoldingRegisters[8] = Integer.parseInt(ClteReg29.getText());
                            Cliente1.WHoldingRegisters[9] = Integer.parseInt(ClteReg30.getText());
                            break;
                        case 3:// input registers
                            Cliente1.RegisterType = 3;
                            /*
                            ClteReg1.setText(String.valueOf(Cliente1.RInputRegisters[0]));
                            ClteReg2.setText(String.valueOf(Cliente1.RInputRegisters[1]));
                            ClteReg3.setText(String.valueOf(Cliente1.RInputRegisters[2]));
                            ClteReg4.setText(String.valueOf(Cliente1.RInputRegisters[3]));
                            ClteReg5.setText(String.valueOf(Cliente1.RInputRegisters[4]));
                            ClteReg6.setText(String.valueOf(Cliente1.RInputRegisters[5]));
                            ClteReg7.setText(String.valueOf(Cliente1.RInputRegisters[6]));
                            ClteReg8.setText(String.valueOf(Cliente1.RInputRegisters[7]));
                            ClteReg9.setText(String.valueOf(Cliente1.RInputRegisters[8]));
                            ClteReg10.setText(String.valueOf(Cliente1.RInputRegisters[9]));
                             */
                            break;
                    }//swithc

                }
                if(Cliente1.bDebugMode)
                {
ClientLog.setText("Last Fault:"+Cliente1.strFault+"\n"+"Last Status:"+Cliente1.strStatus);
                }




            }

        };
        TmrCliente.scheduleAtFixedRate(TmrTskStatus, 0, 200);

        Cliente1.ConnectFlg();

        if (Cliente1.isAlive() == false) {
            Cliente1.start();
        }

    }//GEN-LAST:event_ClientConectActionPerformed

    private void ClientDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientDisconnectActionPerformed
        // TODO add your handling code here:

        Cliente1.DisconnectFlg();
        jCheckBox1.setSelected(false);
        jCheckBox2.setSelected(false);
        jCheckBox5.setSelected(false);


    }//GEN-LAST:event_ClientDisconnectActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox1.isSelected()) {
            Cliente1.FlgRead = true;

        } else {
            Cliente1.FlgRead = false;
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void ClteStartAddressFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ClteStartAddressFocusLost
        // TODO add your handling code here:
        set_labels();
        Cliente1.StartAddres = Integer.parseInt(ClteStartAddress.getText());
    }//GEN-LAST:event_ClteStartAddressFocusLost

    private void ClteReg5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClteReg5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClteReg5ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        if (jCheckBox2.isSelected()) {
            Cliente1.bDebugMode = true;
            ClientLog.enable(true);
            ClientLog.setOpaque(false);

        } else {
            Cliente1.bDebugMode = false;
             ClientLog.enable(false);
              ClientLog.setOpaque(true);
              
        }
        ClientLog.repaint();
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void ClteStartAddress1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ClteStartAddress1FocusLost
        // TODO add your handling code here:
                set_labels1();
       Servidor1.StartAddres = Integer.parseInt(ClteStartAddress1.getText());
    }//GEN-LAST:event_ClteStartAddress1FocusLost

    private void ClientConect1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientConect1ActionPerformed
        try {
            Servidor1 = new Servidor();
 
            Servidor1.setParams("", Port1.getText(), "", ClteStartAddress1.getText(), "10", jCheckBox4.isSelected());
            ClientLog1.setText("\n");
            Timer TmrServidor = new Timer();
            TimerTask TmrTskStatus = new TimerTask() {
                
                @Override
                public void run() {
                    LblStatus1.setText(Servidor1.strStatus);
                    jLabel36.setText(String.valueOf(Servidor1.nNumberofclientsconnected));
                    if ("Server Disconected".equals(Servidor1.strStatus)) {
                        
                        LblStatus1.setForeground(Color.red);
                    } else {
                        LblStatus1.setForeground(Color.green);
                    }
                    
                    if (Servidor1.FlgConnect && Servidor1.FlgRead) {
                         int offset=Integer.parseInt(ClteStartAddress1.getText());
                        switch (ClteRegType1.getSelectedIndex()) {
                            case 0://coils
                               
                                Servidor1.RegisterType = 0;
                                ClteReg11.setText(String.valueOf(Servidor1.RCoils[1+offset]));
                                ClteReg12.setText(String.valueOf(Servidor1.RCoils[2+offset]));
                                ClteReg13.setText(String.valueOf(Servidor1.RCoils[3+offset]));
                                ClteReg14.setText(String.valueOf(Servidor1.RCoils[4+offset]));
                                ClteReg15.setText(String.valueOf(Servidor1.RCoils[5+offset]));
                                ClteReg16.setText(String.valueOf(Servidor1.RCoils[6+offset]));
                                ClteReg17.setText(String.valueOf(Servidor1.RCoils[7+offset]));
                                ClteReg18.setText(String.valueOf(Servidor1.RCoils[8+offset]));
                                ClteReg19.setText(String.valueOf(Servidor1.RCoils[9+offset]));
                                ClteReg20.setText(String.valueOf(Servidor1.RCoils[10+offset]));
                                break;
                            case 1://discrete inputs
                                Servidor1.RegisterType = 1;
                                ClteReg11.setText(String.valueOf(Servidor1.RDiscreteInputs[1+offset]));
                                ClteReg12.setText(String.valueOf(Servidor1.RDiscreteInputs[2+offset]));
                                ClteReg13.setText(String.valueOf(Servidor1.RDiscreteInputs[3+offset]));
                                ClteReg14.setText(String.valueOf(Servidor1.RDiscreteInputs[4+offset]));
                                ClteReg15.setText(String.valueOf(Servidor1.RDiscreteInputs[5+offset]));
                                ClteReg16.setText(String.valueOf(Servidor1.RDiscreteInputs[6+offset]));
                                ClteReg17.setText(String.valueOf(Servidor1.RDiscreteInputs[7+offset]));
                                ClteReg18.setText(String.valueOf(Servidor1.RDiscreteInputs[8+offset]));
                                ClteReg19.setText(String.valueOf(Servidor1.RDiscreteInputs[9+offset]));
                                ClteReg20.setText(String.valueOf(Servidor1.RDiscreteInputs[10+offset]));
                                break;
                            case 2://Holding registers
                                Servidor1.RegisterType = 2;
                                ClteReg11.setText(String.valueOf(Servidor1.RHoldingRegisters[1+offset]));
                                ClteReg12.setText(String.valueOf(Servidor1.RHoldingRegisters[2+offset]));
                                ClteReg13.setText(String.valueOf(Servidor1.RHoldingRegisters[3+offset]));
                                ClteReg14.setText(String.valueOf(Servidor1.RHoldingRegisters[4+offset]));
                                ClteReg15.setText(String.valueOf(Servidor1.RHoldingRegisters[5+offset]));
                                ClteReg16.setText(String.valueOf(Servidor1.RHoldingRegisters[6+offset]));
                                ClteReg17.setText(String.valueOf(Servidor1.RHoldingRegisters[7+offset]));
                                ClteReg18.setText(String.valueOf(Servidor1.RHoldingRegisters[8+offset]));
                                ClteReg19.setText(String.valueOf(Servidor1.RHoldingRegisters[9+offset]));
                                ClteReg20.setText(String.valueOf(Servidor1.RHoldingRegisters[10+offset]));
                                break;
                            case 3:// input registers
                                Servidor1.RegisterType = 3;
                                ClteReg11.setText(String.valueOf(Servidor1.RInputRegisters[1+offset]));
                                ClteReg12.setText(String.valueOf(Servidor1.RInputRegisters[2+offset]));
                                ClteReg13.setText(String.valueOf(Servidor1.RInputRegisters[3+offset]));
                                ClteReg14.setText(String.valueOf(Servidor1.RInputRegisters[4+offset]));
                                ClteReg15.setText(String.valueOf(Servidor1.RInputRegisters[5+offset]));
                                ClteReg16.setText(String.valueOf(Servidor1.RInputRegisters[6+offset]));
                                ClteReg17.setText(String.valueOf(Servidor1.RInputRegisters[7+offset]));
                                ClteReg18.setText(String.valueOf(Servidor1.RInputRegisters[8+offset]));
                                ClteReg19.setText(String.valueOf(Servidor1.RInputRegisters[9+offset]));
                                ClteReg20.setText(String.valueOf(Servidor1.RInputRegisters[10+offset]));
                                break;
                        }//swithc
                        
                    }
                    //***********************************************************************************
                    if (Servidor1.FlgConnect && Servidor1.FlgWrite) {
                        
                        switch (ClteRegType1.getSelectedIndex()) {
                            case 0://coils
                                Servidor1.RegisterType = 0;
                                Servidor1.WCoils[0] = Boolean.parseBoolean(ClteReg31.getText());
                                Servidor1.WCoils[1] = Boolean.parseBoolean(ClteReg32.getText());
                                Servidor1.WCoils[2] = Boolean.parseBoolean(ClteReg33.getText());
                                Servidor1.WCoils[3] = Boolean.parseBoolean(ClteReg34.getText());
                                Servidor1.WCoils[4] = Boolean.parseBoolean(ClteReg35.getText());
                                Servidor1.WCoils[5] = Boolean.parseBoolean(ClteReg36.getText());
                                Servidor1.WCoils[6] = Boolean.parseBoolean(ClteReg37.getText());
                                Servidor1.WCoils[7] = Boolean.parseBoolean(ClteReg38.getText());
                                Servidor1.WCoils[8] = Boolean.parseBoolean(ClteReg39.getText());
                                Servidor1.WCoils[9] = Boolean.parseBoolean(ClteReg40.getText());
                                break;
                            case 1://discrete inputs
                                Servidor1.RegisterType = 1;
                                /*ClteReg1.setText(String.valueOf(Cliente1.RDiscreteInputs[0]));
                                ClteReg2.setText(String.valueOf(Cliente1.RDiscreteInputs[1]));
                                ClteReg3.setText(String.valueOf(Cliente1.RDiscreteInputs[2]));
                                ClteReg4.setText(String.valueOf(Cliente1.RDiscreteInputs[3]));
                                ClteReg5.setText(String.valueOf(Cliente1.RDiscreteInputs[4]));
                                ClteReg6.setText(String.valueOf(Cliente1.RDiscreteInputs[5]));
                                ClteReg7.setText(String.valueOf(Cliente1.RDiscreteInputs[6]));
                                ClteReg8.setText(String.valueOf(Cliente1.RDiscreteInputs[7]));
                                ClteReg9.setText(String.valueOf(Cliente1.RDiscreteInputs[8]));
                                ClteReg10.setText(String.valueOf(Cliente1.RDiscreteInputs[9]));
                                */
                                break;
                            case 2://Holding registers
                                Servidor1.RegisterType = 2;
                                Servidor1.WHoldingRegisters[0] = Integer.parseInt(ClteReg31.getText());
                                Servidor1.WHoldingRegisters[1] = Integer.parseInt(ClteReg32.getText());
                                Servidor1.WHoldingRegisters[2] = Integer.parseInt(ClteReg33.getText());
                                Servidor1.WHoldingRegisters[3] = Integer.parseInt(ClteReg34.getText());
                                Servidor1.WHoldingRegisters[4] = Integer.parseInt(ClteReg35.getText());
                                Servidor1.WHoldingRegisters[5] = Integer.parseInt(ClteReg36.getText());
                                Servidor1.WHoldingRegisters[6] = Integer.parseInt(ClteReg37.getText());
                                Servidor1.WHoldingRegisters[7] = Integer.parseInt(ClteReg38.getText());
                                Servidor1.WHoldingRegisters[8] = Integer.parseInt(ClteReg39.getText());
                                Servidor1.WHoldingRegisters[9] = Integer.parseInt(ClteReg40.getText());
                                break;
                            case 3:// input registers
                                Servidor1.RegisterType = 3;
                                /*
                                ClteReg1.setText(String.valueOf(Cliente1.RInputRegisters[0]));
                                ClteReg2.setText(String.valueOf(Cliente1.RInputRegisters[1]));
                                ClteReg3.setText(String.valueOf(Cliente1.RInputRegisters[2]));
                                ClteReg4.setText(String.valueOf(Cliente1.RInputRegisters[3]));
                                ClteReg5.setText(String.valueOf(Cliente1.RInputRegisters[4]));
                                ClteReg6.setText(String.valueOf(Cliente1.RInputRegisters[5]));
                                ClteReg7.setText(String.valueOf(Cliente1.RInputRegisters[6]));
                                ClteReg8.setText(String.valueOf(Cliente1.RInputRegisters[7]));
                                ClteReg9.setText(String.valueOf(Cliente1.RInputRegisters[8]));
                                ClteReg10.setText(String.valueOf(Cliente1.RInputRegisters[9]));
                                */
                                break;
                        }//swithc
                        
                    }
                                  if(Servidor1.bDebugMode)
                {
ClientLog1.setText("Last Fault:"+Servidor1.strFault+"\n"+"Last Status:"+Servidor1.strStatus);
                }  
                }
                
            };
            TmrServidor.scheduleAtFixedRate(TmrTskStatus, 0, 200);
            
            Servidor1.ConnectFlg();
            
            if (Servidor1.isAlive() == false) {
                //Servidor1.interrupt();
                Servidor1.start();
                       
            }
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ClientConect1ActionPerformed

    private void ClientDisconnect1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientDisconnect1ActionPerformed
        // TODO add your handling code here:
        Servidor1.DisconnectFlg();
        jCheckBox3.setSelected(false);
        jCheckBox4.setSelected(false);
        jCheckBox6.setSelected(false);

      

    }//GEN-LAST:event_ClientDisconnect1ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        if (jCheckBox3.isSelected()) {
            Servidor1.FlgRead = true;

        } else {
            Servidor1.FlgRead = false;
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void ClteReg15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClteReg15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClteReg15ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed

        if (jCheckBox4.isSelected()) {
            Servidor1.bDebugMode = true;

        } else {
            Servidor1.bDebugMode = false;
        }

    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox5.isSelected()) {
            Cliente1.FlgWrite = true;

        } else {
            Cliente1.FlgWrite = false;
        }
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void ClteReg25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClteReg25ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClteReg25ActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        if (jCheckBox6.isSelected()) {
            Servidor1.FlgWrite = true;

        } else {
            Servidor1.FlgWrite = false;
        }
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void ClteReg35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClteReg35ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClteReg35ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClientConect;
    private javax.swing.JButton ClientConect1;
    private javax.swing.JButton ClientDisconnect;
    private javax.swing.JButton ClientDisconnect1;
    private javax.swing.JTextArea ClientLog;
    private javax.swing.JTextArea ClientLog1;
    private javax.swing.JTextField ClteReg1;
    private javax.swing.JTextField ClteReg10;
    private javax.swing.JTextField ClteReg11;
    private javax.swing.JTextField ClteReg12;
    private javax.swing.JTextField ClteReg13;
    private javax.swing.JTextField ClteReg14;
    private javax.swing.JTextField ClteReg15;
    private javax.swing.JTextField ClteReg16;
    private javax.swing.JTextField ClteReg17;
    private javax.swing.JTextField ClteReg18;
    private javax.swing.JTextField ClteReg19;
    private javax.swing.JTextField ClteReg2;
    private javax.swing.JTextField ClteReg20;
    private javax.swing.JTextField ClteReg21;
    private javax.swing.JTextField ClteReg22;
    private javax.swing.JTextField ClteReg23;
    private javax.swing.JTextField ClteReg24;
    private javax.swing.JTextField ClteReg25;
    private javax.swing.JTextField ClteReg26;
    private javax.swing.JTextField ClteReg27;
    private javax.swing.JTextField ClteReg28;
    private javax.swing.JTextField ClteReg29;
    private javax.swing.JTextField ClteReg3;
    private javax.swing.JTextField ClteReg30;
    private javax.swing.JTextField ClteReg31;
    private javax.swing.JTextField ClteReg32;
    private javax.swing.JTextField ClteReg33;
    private javax.swing.JTextField ClteReg34;
    private javax.swing.JTextField ClteReg35;
    private javax.swing.JTextField ClteReg36;
    private javax.swing.JTextField ClteReg37;
    private javax.swing.JTextField ClteReg38;
    private javax.swing.JTextField ClteReg39;
    private javax.swing.JTextField ClteReg4;
    private javax.swing.JTextField ClteReg40;
    private javax.swing.JTextField ClteReg5;
    private javax.swing.JTextField ClteReg6;
    private javax.swing.JTextField ClteReg7;
    private javax.swing.JTextField ClteReg8;
    private javax.swing.JTextField ClteReg9;
    private javax.swing.JComboBox<String> ClteRegType;
    private javax.swing.JComboBox<String> ClteRegType1;
    private javax.swing.JTextField ClteStartAddress;
    private javax.swing.JTextField ClteStartAddress1;
    private javax.swing.JTextField ID;
    private javax.swing.JTextField IP;
    private javax.swing.JLabel LblStatus;
    private javax.swing.JLabel LblStatus1;
    private javax.swing.JTextField Port;
    private javax.swing.JTextField Port1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

    public void set_labels() {
        int aux = 0;

        aux = 0 + Integer.parseInt(ClteStartAddress.getText());
        jLabel18.setText(String.valueOf(aux));
        aux = 1 + Integer.parseInt(ClteStartAddress.getText());
        jLabel16.setText(String.valueOf(aux));
        aux = 2 + Integer.parseInt(ClteStartAddress.getText());
        jLabel15.setText(String.valueOf(aux));
        aux = 3 + Integer.parseInt(ClteStartAddress.getText());
        jLabel14.setText(String.valueOf(aux));
        aux = 4 + Integer.parseInt(ClteStartAddress.getText());
        jLabel13.setText(String.valueOf(aux));
        aux = 5 + Integer.parseInt(ClteStartAddress.getText());
        jLabel12.setText(String.valueOf(aux));
        aux = 6 + Integer.parseInt(ClteStartAddress.getText());
        jLabel11.setText(String.valueOf(aux));
        aux = 7 + Integer.parseInt(ClteStartAddress.getText());
        jLabel10.setText(String.valueOf(aux));
        aux = 8 + Integer.parseInt(ClteStartAddress.getText());
        jLabel9.setText(String.valueOf(aux));
        aux = 9 + Integer.parseInt(ClteStartAddress.getText());
        jLabel8.setText(String.valueOf(aux));

    }
    public void set_labels1() {
        int aux = 0;

        aux = 0 + Integer.parseInt(ClteStartAddress1.getText());
        jLabel34.setText(String.valueOf(aux));
        aux = 1 + Integer.parseInt(ClteStartAddress1.getText());
        jLabel33.setText(String.valueOf(aux));
        aux = 2 + Integer.parseInt(ClteStartAddress1.getText());
        jLabel32.setText(String.valueOf(aux));
        aux = 3 + Integer.parseInt(ClteStartAddress1.getText());
        jLabel31.setText(String.valueOf(aux));
        aux = 4 + Integer.parseInt(ClteStartAddress1.getText());
        jLabel30.setText(String.valueOf(aux));
        aux = 5 + Integer.parseInt(ClteStartAddress1.getText());
        jLabel29.setText(String.valueOf(aux));
        aux = 6 + Integer.parseInt(ClteStartAddress1.getText());
        jLabel28.setText(String.valueOf(aux));
        aux = 7 + Integer.parseInt(ClteStartAddress1.getText());
        jLabel27.setText(String.valueOf(aux));
        aux = 8 + Integer.parseInt(ClteStartAddress1.getText());
        jLabel26.setText(String.valueOf(aux));
        aux = 9 + Integer.parseInt(ClteStartAddress1.getText());
        jLabel25.setText(String.valueOf(aux));

    }

}
